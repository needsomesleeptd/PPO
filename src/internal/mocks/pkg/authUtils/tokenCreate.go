// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/authUtils/tokenCreate.go

// Package mock_auth_utils is a generated GoMock package.
package mock_auth_utils

import (
	models "annotater/internal/models"
	auth_utils "annotater/internal/pkg/authUtils"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockITokenHandler is a mock of ITokenHandler interface.
type MockITokenHandler struct {
	ctrl     *gomock.Controller
	recorder *MockITokenHandlerMockRecorder
}

// MockITokenHandlerMockRecorder is the mock recorder for MockITokenHandler.
type MockITokenHandlerMockRecorder struct {
	mock *MockITokenHandler
}

// NewMockITokenHandler creates a new mock instance.
func NewMockITokenHandler(ctrl *gomock.Controller) *MockITokenHandler {
	mock := &MockITokenHandler{ctrl: ctrl}
	mock.recorder = &MockITokenHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITokenHandler) EXPECT() *MockITokenHandlerMockRecorder {
	return m.recorder
}

// GenerateToken mocks base method.
func (m *MockITokenHandler) GenerateToken(credentials models.User, key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", credentials, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockITokenHandlerMockRecorder) GenerateToken(credentials, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockITokenHandler)(nil).GenerateToken), credentials, key)
}

// ParseToken mocks base method.
func (m *MockITokenHandler) ParseToken(tokenString, key string) (*auth_utils.Payload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", tokenString, key)
	ret0, _ := ret[0].(*auth_utils.Payload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockITokenHandlerMockRecorder) ParseToken(tokenString, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockITokenHandler)(nil).ParseToken), tokenString, key)
}

// ValidateToken mocks base method.
func (m *MockITokenHandler) ValidateToken(tokenString, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", tokenString, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockITokenHandlerMockRecorder) ValidateToken(tokenString, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockITokenHandler)(nil).ValidateToken), tokenString, key)
}
