// Code generated by MockGen. DO NOT EDIT.
// Source: bl/userService/userService.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	models "annotater/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIUserService is a mock of IUserService interface.
type MockIUserService struct {
	ctrl     *gomock.Controller
	recorder *MockIUserServiceMockRecorder
}

// MockIUserServiceMockRecorder is the mock recorder for MockIUserService.
type MockIUserServiceMockRecorder struct {
	mock *MockIUserService
}

// NewMockIUserService creates a new mock instance.
func NewMockIUserService(ctrl *gomock.Controller) *MockIUserService {
	mock := &MockIUserService{ctrl: ctrl}
	mock.recorder = &MockIUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserService) EXPECT() *MockIUserServiceMockRecorder {
	return m.recorder
}

// ChangeUserRoleByLogin mocks base method.
func (m *MockIUserService) ChangeUserRoleByLogin(login string, role models.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeUserRoleByLogin", login, role)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeUserRoleByLogin indicates an expected call of ChangeUserRoleByLogin.
func (mr *MockIUserServiceMockRecorder) ChangeUserRoleByLogin(login, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserRoleByLogin", reflect.TypeOf((*MockIUserService)(nil).ChangeUserRoleByLogin), login, role)
}

// IsRolePermitted mocks base method.
func (m *MockIUserService) IsRolePermitted(currRole, reqRole models.Role) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRolePermitted", currRole, reqRole)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRolePermitted indicates an expected call of IsRolePermitted.
func (mr *MockIUserServiceMockRecorder) IsRolePermitted(currRole, reqRole interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRolePermitted", reflect.TypeOf((*MockIUserService)(nil).IsRolePermitted), currRole, reqRole)
}
