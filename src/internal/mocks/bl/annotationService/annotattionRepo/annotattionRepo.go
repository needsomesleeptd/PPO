// Code generated by MockGen. DO NOT EDIT.
// Source: bl/annotationService/annotattionRepo/annotattionRepo.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	models "annotater/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIAnotattionRepository is a mock of IAnotattionRepository interface.
type MockIAnotattionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIAnotattionRepositoryMockRecorder
}

// MockIAnotattionRepositoryMockRecorder is the mock recorder for MockIAnotattionRepository.
type MockIAnotattionRepositoryMockRecorder struct {
	mock *MockIAnotattionRepository
}

// NewMockIAnotattionRepository creates a new mock instance.
func NewMockIAnotattionRepository(ctrl *gomock.Controller) *MockIAnotattionRepository {
	mock := &MockIAnotattionRepository{ctrl: ctrl}
	mock.recorder = &MockIAnotattionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAnotattionRepository) EXPECT() *MockIAnotattionRepositoryMockRecorder {
	return m.recorder
}

// AddAnottation mocks base method.
func (m *MockIAnotattionRepository) AddAnottation(markUp *models.Markup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAnottation", markUp)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAnottation indicates an expected call of AddAnottation.
func (mr *MockIAnotattionRepositoryMockRecorder) AddAnottation(markUp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAnottation", reflect.TypeOf((*MockIAnotattionRepository)(nil).AddAnottation), markUp)
}

// DeleteAnotattion mocks base method.
func (m *MockIAnotattionRepository) DeleteAnotattion(id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnotattion", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnotattion indicates an expected call of DeleteAnotattion.
func (mr *MockIAnotattionRepositoryMockRecorder) DeleteAnotattion(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnotattion", reflect.TypeOf((*MockIAnotattionRepository)(nil).DeleteAnotattion), id)
}

// GetAllAnottations mocks base method.
func (m *MockIAnotattionRepository) GetAllAnottations() ([]models.Markup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAnottations")
	ret0, _ := ret[0].([]models.Markup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAnottations indicates an expected call of GetAllAnottations.
func (mr *MockIAnotattionRepositoryMockRecorder) GetAllAnottations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAnottations", reflect.TypeOf((*MockIAnotattionRepository)(nil).GetAllAnottations))
}

// GetAnottationByID mocks base method.
func (m *MockIAnotattionRepository) GetAnottationByID(id uint64) (*models.Markup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnottationByID", id)
	ret0, _ := ret[0].(*models.Markup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnottationByID indicates an expected call of GetAnottationByID.
func (mr *MockIAnotattionRepositoryMockRecorder) GetAnottationByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnottationByID", reflect.TypeOf((*MockIAnotattionRepository)(nil).GetAnottationByID), id)
}

// GetAnottationsByUserID mocks base method.
func (m *MockIAnotattionRepository) GetAnottationsByUserID(id uint64) ([]models.Markup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnottationsByUserID", id)
	ret0, _ := ret[0].([]models.Markup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnottationsByUserID indicates an expected call of GetAnottationsByUserID.
func (mr *MockIAnotattionRepositoryMockRecorder) GetAnottationsByUserID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnottationsByUserID", reflect.TypeOf((*MockIAnotattionRepository)(nil).GetAnottationsByUserID), id)
}
