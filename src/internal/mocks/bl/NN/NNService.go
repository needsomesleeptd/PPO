// Code generated by MockGen. DO NOT EDIT.
// Source: bl/NN/NNService.go

// Package mock_nn is a generated GoMock package.
package mock_nn

import (
	models "annotater/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockINeuralNetwork is a mock of INeuralNetwork interface.
type MockINeuralNetwork struct {
	ctrl     *gomock.Controller
	recorder *MockINeuralNetworkMockRecorder
}

// MockINeuralNetworkMockRecorder is the mock recorder for MockINeuralNetwork.
type MockINeuralNetworkMockRecorder struct {
	mock *MockINeuralNetwork
}

// NewMockINeuralNetwork creates a new mock instance.
func NewMockINeuralNetwork(ctrl *gomock.Controller) *MockINeuralNetwork {
	mock := &MockINeuralNetwork{ctrl: ctrl}
	mock.recorder = &MockINeuralNetworkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockINeuralNetwork) EXPECT() *MockINeuralNetworkMockRecorder {
	return m.recorder
}

// Predict mocks base method.
func (m *MockINeuralNetwork) Predict(document models.DocumentMetaData) ([]models.Markup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Predict", document)
	ret0, _ := ret[0].([]models.Markup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Predict indicates an expected call of Predict.
func (mr *MockINeuralNetworkMockRecorder) Predict(document interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Predict", reflect.TypeOf((*MockINeuralNetwork)(nil).Predict), document)
}
